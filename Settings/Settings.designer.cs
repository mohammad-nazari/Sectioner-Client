// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>SettingsLib</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>True</UseBaseClass><GenBaseClass>True</GenBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>True</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>True</OrderXMLAttrib><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace SettingsLib
{
	using System;
	using System.Diagnostics;
	using System.Xml.Serialization;
	using System.Collections;
	using System.Xml.Schema;
	using System.ComponentModel;
	using System.IO;
	using System.Text;
	using System.Xml;
	using System.Collections.Generic;
	using System.Runtime.Serialization;


	#region Base entity class
	public partial class EntityBase<T>:System.ComponentModel.INotifyPropertyChanged
	{

		private static System.Xml.Serialization.XmlSerializer serializer;

		private static System.Xml.Serialization.XmlSerializer Serializer
		{
			get
			{
				if((serializer == null))
				{
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(T));
				}
				return serializer;
			}
		}

		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		public virtual void OnPropertyChanged(string propertyName)
		{
			System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
			if((handler != null))
			{
				handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current EntityBase object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize(System.Text.Encoding encoding)
		{
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try
			{
				memoryStream = new System.IO.MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				xmlWriterSettings.Encoding = encoding;
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				Serializer.Serialize(xmlWriter, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			}
			finally
			{
				if((streamReader != null))
				{
					streamReader.Dispose();
				}
				if((memoryStream != null))
				{
					memoryStream.Dispose();
				}
			}
		}

		public virtual string Serialize()
		{
			return Serialize(Encoding.UTF8);
		}

		/// <summary>
		/// Deserializes workflow markup into an EntityBase object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output EntityBase object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out T obj, out System.Exception exception)
		{
			exception = null;
			obj = default(T);
			try
			{
				obj = Deserialize(xml);
				return true;
			}
			catch(System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out T obj)
		{
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static T Deserialize(string xml)
		{
			System.IO.StringReader stringReader = null;
			try
			{
				stringReader = new System.IO.StringReader(xml);
				return ((T)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			}
			finally
			{
				if((stringReader != null))
				{
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current EntityBase object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
		{
			exception = null;
			try
			{
				SaveToFile(fileName, encoding);
				return true;
			}
			catch(System.Exception e)
			{
				exception = e;
				return false;
			}
		}

		public virtual bool SaveToFile(string fileName, out System.Exception exception)
		{
			return SaveToFile(fileName, Encoding.UTF8, out exception);
		}

		public virtual void SaveToFile(string fileName)
		{
			SaveToFile(fileName, Encoding.UTF8);
		}

		public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
		{
			System.IO.StreamWriter streamWriter = null;
			try
			{
				string xmlString = Serialize(encoding);
				streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			}
			finally
			{
				if((streamWriter != null))
				{
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an EntityBase object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output EntityBase object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out T obj, out System.Exception exception)
		{
			exception = null;
			obj = default(T);
			try
			{
				obj = LoadFromFile(fileName, encoding);
				return true;
			}
			catch(System.Exception ex)
			{
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out T obj, out System.Exception exception)
		{
			return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
		}

		public static bool LoadFromFile(string fileName, out T obj)
		{
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static T LoadFromFile(string fileName)
		{
			return LoadFromFile(fileName, Encoding.UTF8);
		}

		public static T LoadFromFile(string fileName, System.Text.Encoding encoding)
		{
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try
			{
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file, encoding);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			}
			finally
			{
				if((file != null))
				{
					file.Dispose();
				}
				if((sr != null))
				{
					sr.Dispose();
				}
			}
		}
		#endregion

		#region Clone method
		/// <summary>
		/// Create a clone of this T object
		/// </summary>
		public virtual T Clone()
		{
			return ((T)(this.MemberwiseClone()));
		}
		#endregion
	}
	#endregion

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlRootAttribute("ClientSettings", Namespace = "", IsNullable = false)]
	[System.Runtime.Serialization.DataContractAttribute(Name = "Settings")]
	public partial class Settings:EntityBase<Settings>
	{

		private List<SettingSensors> sensorsSettingField;

		private List<SettingSensorsMono> sensorsSettingMonoField;

		private List<SettingLevelColor> levelColorsField;

		private SettingTempratureType tempratureTypeShowField;

		public Settings()
		{
			this.levelColorsField = new List<SettingLevelColor>();
			this.sensorsSettingMonoField = new List<SettingSensorsMono>();
			this.sensorsSettingField = new List<SettingSensors>();
		}

		[System.Xml.Serialization.XmlElementAttribute("SensorsSetting", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public List<SettingSensors> SensorsSetting
		{
			get
			{
				return this.sensorsSettingField;
			}
			set
			{
				if((this.sensorsSettingField != null))
				{
					if((sensorsSettingField.Equals(value) != true))
					{
						this.sensorsSettingField = value;
						this.OnPropertyChanged("SensorsSetting");
					}
				}
				else
				{
					this.sensorsSettingField = value;
					this.OnPropertyChanged("SensorsSetting");
				}
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("SensorsSettingMono", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 1)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public List<SettingSensorsMono> SensorsSettingMono
		{
			get
			{
				return this.sensorsSettingMonoField;
			}
			set
			{
				if((this.sensorsSettingMonoField != null))
				{
					if((sensorsSettingMonoField.Equals(value) != true))
					{
						this.sensorsSettingMonoField = value;
						this.OnPropertyChanged("SensorsSettingMono");
					}
				}
				else
				{
					this.sensorsSettingMonoField = value;
					this.OnPropertyChanged("SensorsSettingMono");
				}
			}
		}

		[System.Xml.Serialization.XmlElementAttribute("LevelColors", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 2)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public List<SettingLevelColor> LevelColors
		{
			get
			{
				return this.levelColorsField;
			}
			set
			{
				if((this.levelColorsField != null))
				{
					if((levelColorsField.Equals(value) != true))
					{
						this.levelColorsField = value;
						this.OnPropertyChanged("LevelColors");
					}
				}
				else
				{
					this.levelColorsField = value;
					this.OnPropertyChanged("LevelColors");
				}
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 3)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public SettingTempratureType TempratureTypeShow
		{
			get
			{
				return this.tempratureTypeShowField;
			}
			set
			{
				if((tempratureTypeShowField.Equals(value) != true))
				{
					this.tempratureTypeShowField = value;
					this.OnPropertyChanged("TempratureTypeShow");
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
	[System.Runtime.Serialization.DataContractAttribute(Name = "SettingSensors")]
	public partial class SettingSensors:EntityBase<SettingSensors>
	{

		private SettingSensor sensorNameField;

		private SettingLevel minimumLevelField;

		private SettingLevel maximumLevelField;

		private SettingLevel maximumThresholdLevelField;

		private SettingLevel minimumThresholdLevelField;

		[System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public SettingSensor SensorName
		{
			get
			{
				return this.sensorNameField;
			}
			set
			{
				if((sensorNameField.Equals(value) != true))
				{
					this.sensorNameField = value;
					this.OnPropertyChanged("SensorName");
				}
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 1)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public SettingLevel MinimumLevel
		{
			get
			{
				return this.minimumLevelField;
			}
			set
			{
				if((minimumLevelField.Equals(value) != true))
				{
					this.minimumLevelField = value;
					this.OnPropertyChanged("MinimumLevel");
				}
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 2)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public SettingLevel MaximumLevel
		{
			get
			{
				return this.maximumLevelField;
			}
			set
			{
				if((maximumLevelField.Equals(value) != true))
				{
					this.maximumLevelField = value;
					this.OnPropertyChanged("MaximumLevel");
				}
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 3)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public SettingLevel MaximumThresholdLevel
		{
			get
			{
				return this.maximumThresholdLevelField;
			}
			set
			{
				if((maximumThresholdLevelField.Equals(value) != true))
				{
					this.maximumThresholdLevelField = value;
					this.OnPropertyChanged("MaximumThresholdLevel");
				}
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 4)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public SettingLevel MinimumThresholdLevel
		{
			get
			{
				return this.minimumThresholdLevelField;
			}
			set
			{
				if((minimumThresholdLevelField.Equals(value) != true))
				{
					this.minimumThresholdLevelField = value;
					this.OnPropertyChanged("MinimumThresholdLevel");
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
	public enum SettingSensor
	{

		/// <remarks/>
		TEMPERATURE,

		/// <remarks/>
		HUMIDITY,

		/// <remarks/>
		ACVOLTAGE,

		/// <remarks/>
		ACVOLTAGE1,

		/// <remarks/>
		ACVOLTAGE2,

		/// <remarks/>
		ACVOLTAGE3,

		/// <remarks/>
		ACAMPERE,

		/// <remarks/>
		ACAMPERE1,

		/// <remarks/>
		ACAMPERE2,

		/// <remarks/>
		ACAMPERE3,

		/// <remarks/>
		DCVOLTAGE,

		/// <remarks/>
		DCAMPERE,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
	public enum SettingLevel
	{

		/// <remarks/>
		Normal,

		/// <remarks/>
		Disable,

		/// <remarks/>
		Warning,

		/// <remarks/>
		Minor,

		/// <remarks/>
		Major,

		/// <remarks/>
		Critical,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
	[System.Runtime.Serialization.DataContractAttribute(Name = "SettingLevelColor")]
	public partial class SettingLevelColor:EntityBase<SettingLevelColor>
	{

		private SettingLevel levelNameField;

		private SettingColors colorNameField;

		[System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public SettingLevel LevelName
		{
			get
			{
				return this.levelNameField;
			}
			set
			{
				if((levelNameField.Equals(value) != true))
				{
					this.levelNameField = value;
					this.OnPropertyChanged("LevelName");
				}
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 1)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public SettingColors ColorName
		{
			get
			{
				return this.colorNameField;
			}
			set
			{
				if((colorNameField.Equals(value) != true))
				{
					this.colorNameField = value;
					this.OnPropertyChanged("ColorName");
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
	public enum SettingColors
	{

		/// <remarks/>
		bisque,

		/// <remarks/>
		blue,

		/// <remarks/>
		brown,

		/// <remarks/>
		cyan,

		/// <remarks/>
		darkred,

		/// <remarks/>
		gray,

		/// <remarks/>
		green,

		/// <remarks/>
		greenyellow,

		/// <remarks/>
		info,

		/// <remarks/>
		khaki,

		/// <remarks/>
		lightslategray,

		/// <remarks/>
		menu,

		/// <remarks/>
		navy,

		/// <remarks/>
		orange,

		/// <remarks/>
		pink,

		/// <remarks/>
		purple,

		/// <remarks/>
		red,

		/// <remarks/>
		salmon,

		/// <remarks/>
		silver,

		/// <remarks/>
		turquoise,

		/// <remarks/>
		yellow,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
	[System.Runtime.Serialization.DataContractAttribute(Name = "SettingSensorsMono")]
	public partial class SettingSensorsMono:EntityBase<SettingSensorsMono>
	{

		private SettingSensorMono sensorNameField;

		private SettingLevel levelNameField;

		[System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public SettingSensorMono SensorName
		{
			get
			{
				return this.sensorNameField;
			}
			set
			{
				if((sensorNameField.Equals(value) != true))
				{
					this.sensorNameField = value;
					this.OnPropertyChanged("SensorName");
				}
			}
		}

		[System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 1)]
		[System.Runtime.Serialization.DataMemberAttribute()]
		public SettingLevel LevelName
		{
			get
			{
				return this.levelNameField;
			}
			set
			{
				if((levelNameField.Equals(value) != true))
				{
					this.levelNameField = value;
					this.OnPropertyChanged("LevelName");
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
	public enum SettingSensorMono
	{

		/// <remarks/>
		GAS,

		/// <remarks/>
		SMOKE,

		/// <remarks/>
		MAGNET,

		/// <remarks/>
		MOTION,

		/// <remarks/>
		WATER,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
	public enum SettingTempratureType
	{

		/// <remarks/>
		Centigrade,

		/// <remarks/>
		Fahrenheit,
	}
}
